// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/E-Maxon/what-your-type-bot/internal/tg_api (interfaces: TgAPI)
//
// Generated by this command:
//
//	mockgen -build_flags=--mod=mod -destination=./tg_api/mock.go -package=tg_api_mock github.com/E-Maxon/what-your-type-bot/internal/tg_api TgAPI
//

// Package tg_api_mock is a generated GoMock package.
package tg_api_mock

import (
	reflect "reflect"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	gomock "go.uber.org/mock/gomock"
)

// MockTgAPI is a mock of TgAPI interface.
type MockTgAPI struct {
	ctrl     *gomock.Controller
	recorder *MockTgAPIMockRecorder
}

// MockTgAPIMockRecorder is the mock recorder for MockTgAPI.
type MockTgAPIMockRecorder struct {
	mock *MockTgAPI
}

// NewMockTgAPI creates a new mock instance.
func NewMockTgAPI(ctrl *gomock.Controller) *MockTgAPI {
	mock := &MockTgAPI{ctrl: ctrl}
	mock.recorder = &MockTgAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTgAPI) EXPECT() *MockTgAPIMockRecorder {
	return m.recorder
}

// ListenForWebhook mocks base method.
func (m *MockTgAPI) ListenForWebhook(arg0 string) tgbotapi.UpdatesChannel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenForWebhook", arg0)
	ret0, _ := ret[0].(tgbotapi.UpdatesChannel)
	return ret0
}

// ListenForWebhook indicates an expected call of ListenForWebhook.
func (mr *MockTgAPIMockRecorder) ListenForWebhook(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenForWebhook", reflect.TypeOf((*MockTgAPI)(nil).ListenForWebhook), arg0)
}

// SendMessage mocks base method.
func (m *MockTgAPI) SendMessage(arg0 int64, arg1 tgbotapi.MessageConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockTgAPIMockRecorder) SendMessage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockTgAPI)(nil).SendMessage), arg0, arg1)
}

// SetWebhook mocks base method.
func (m *MockTgAPI) SetWebhook(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWebhook", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWebhook indicates an expected call of SetWebhook.
func (mr *MockTgAPIMockRecorder) SetWebhook(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWebhook", reflect.TypeOf((*MockTgAPI)(nil).SetWebhook), arg0)
}
